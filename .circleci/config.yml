# The configuration file is written in YAML.
# See: circleci.com/docs/2.0/writing-yaml

version: 2.1
# Use the (latest) 2.1 version of CircleCI pipeline process engine.
# See: circleci.com/docs/2.0/configuration-reference

orbs:
  # Orbs are basically macro collections that are hosted by CircleCI.
  # We can call them like functions when we need them further down.
  win: circleci/windows@2.2.0
  # The Windows orb provides macros related to the Windows executor.

jobs:
# Define jobs to be invoked later in a workflow.
# See: circleci.com/docs/2.0/configuration-reference/#jobs

    Linux_Python36:
    # This job is to run the test suite with Python 3.6 on Linux. So we give
    # it a name that reflects that.
        docker:
        # This line requests a Docker executor. An executor basically defines
        # the operating system running on the virtual machine that executes
        # the job. We could request a Linux virtual machine with "machine",
        # but the "docker" executor is more lightweight (thanks to the Docker
        # technology) and therefore spins up faster.
        # See: circleci.com/docs/2.0/executor-types
          - image: cimg/python:3.6
            # Docker also makes it easy to set up common configurations on
            # the virtual machine by loading pre-defined Docker images.
            # We could use Docker containers from anywhere, for example from
            # Docker Hub. Here we are using one provided by Circle CI itself.
            # See: circleci.com/developer/images
            # This image adds a Python installation to the basic Ubuntu OS.
            # The specific Python version is selected via an image tag.
            # See: circleci.com/developer/images/image/cimg/python
        steps: &test_steps
        # With the environment specified, we can now run the job step by step.
        # The first step is always to check out the code from the GitHub repo.
        # We also save everything we define here in a template, just so we
        # don't have to repeat ourselves further down when we want to run the
        # same steps in the other environments.
        # See: circleci.com/docs/2.0/writing-yaml/#anchors-and-aliases
          - checkout
          - run:
              name: Update pip.
              command: pip install --upgrade pip
          - run:
              name: Install package.
              command: pip install .[test]
          - run:
              name: Lint code.
              command: flake8
          - run:
              name: Run tests.
              command: pytest

    Linux_Python37:
    # This job does the same as the first one, only with Python 3.7.
        docker:
          - image: cimg/python:3.7
        steps: *test_steps
        # Here we re-use the template for the steps defined above.

    Linux_Python38:
        docker:
          - image: cimg/python:3.8
        steps: *test_steps

    Linux_Python39:
        docker:
          - image: cimg/python:3.8
        steps: *test_steps

    Windows:
    # This time we want the Windows executor. This is a pre-configured virtual
    # machine with a certain Python version already installed. Unfortunately,
    # we cannot easily change the Python version, as we did for Linux by
    # loading a specific Docker image.
        executor:
            name: win/default
            # Here we are calling the "default" action from the "win" orb.
        steps: *test_steps

    macOS:
        macos:
            xcode: 13.0.0
            # See: circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
        steps: *test_steps


workflows:
# To actually run the jobs, they must appear in a workflow.
# See: circleci.com/docs/2.0/configuration-reference/#workflows

    test_commit:
    # The name of this workflow. It tests a new commit to the repo.
        jobs:
        # List the jobs to run. They will usually run in parallel.
          - Linux_Python36
          - Linux_Python37
          - Linux_Python38
          - Linux_Python39
          # Running Windows eats up the free credits.
          # - Windows
          # macOS executors are not available in the free plan.
          # - macOS
